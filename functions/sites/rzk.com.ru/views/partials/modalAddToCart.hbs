<!-- Modal -->
<div class="modal" id="cartAddModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="input-group mb-3">
          <input type="number" id="qty" class="form-control" placeholder="Введите количество товара" aria-label="Введите количество товара" aria-describedby="basic-addon2">
          <span class="input-group-text" id="basic-addon2"></span>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" id="deleteFromCart" class="btn btn-danger">Удалить</button>
        <button type="button" id="addToCart" class="btn btn-primary" data-bs-currencyName="{{currencyName}}">Добавить</button>
      </div>
    </div>
  </div>
</div>
<script>
  // round to 2 decimals
  const roundNumber = (num) => {
    return Math.round((num + Number.EPSILON) * 100) / 100;
  };
  const cartAddModal = document.getElementById("cartAddModal");
  const cartAddModalOpt = new bootstrap.Modal(cartAddModal);
  const addButton = document.getElementById("addToCart")
  const delButton = document.getElementById("deleteFromCart");
  const qty = document.getElementById("qty");
  const cartCount = document.getElementById("cartCount");
  const product = {};
  let button = {};
  cartAddModal.addEventListener("show.bs.modal", function (event) {
    // Button that triggered the modal
    button = event.relatedTarget;
    // Extract info from data-bs-* attributes
    product.objectId = button.getAttribute("data-bs-objectId");
    product.id = button.getAttribute("data-bs-id");
    product.name = button.getAttribute("data-bs-name");
    // product.price = + button.getAttribute("data-bs-price");
    product.unit = button.getAttribute("data-bs-unit");
    product.qty = + button.getAttribute("data-bs-qty");
    product.currencyName = addButton.getAttribute("data-bs-currencyName");
    // set default values
    product.added = false;
    qty.value = "";
    delButton.classList.add("d-none");
    addButton.disabled = false;
    delButton.disabled = false;
    // Update the modal's content.
    const modalTitle = cartAddModal.querySelector(".modal-title");
    const modalUnit = cartAddModal.querySelector('#basic-addon2');
    modalTitle.textContent = product.name;
    modalUnit.textContent = product.unit;
  });
  // focus qty input when modal shown
  cartAddModal.addEventListener("shown.bs.modal", function (event) {
    if (product.qty) {
      product.added = true;
      qty.value = product.qty;
      delButton.classList.remove("d-none");
    }
    qty.focus();
    qty.select();
  });
  // add product to cart
  const addToCartHandler = async (qtyValue) => {
    product.qty = qtyValue;
    try {
      addButton.disabled = true;
      delButton.disabled = true;
      const response = await fetch("/cart/add", {
        method: "POST",
        headers: {
          "Content-Type": "application/json;charset=utf-8",
        },
        body: JSON.stringify(product),
      });
      const productRes = await response.json();
      if (!response.ok) {
        throw new Error(productRes.error);
      }
      console.log(JSON.stringify(productRes));
      if (product.qty) {
        button.innerText = `${product.qty} ${product.unit} ${roundNumber(product.qty * productRes.price)} ${product.currencyName}`;
        button.setAttribute("data-bs-qty", product.qty);
        button.classList.remove("btn-primary");
        button.classList.add("btn-success");
      } else {
        button.innerText = "Добавить товар";
        button.classList.remove("btn-success");
        button.classList.add("btn-primary");
        button.removeAttribute("data-bs-qty");
      }
      cartCount.innerText = productRes.cartCount;
      // hide modal
      cartAddModalOpt.hide();
    } catch (error) {
      alert(error);
      addButton.disabled = false;
      delButton.disabled = false;
    }
  };
  // events
  addButton.addEventListener("click", async () => {
    await addToCartHandler(+ qty.value);
  });
  // delete product
  delButton.addEventListener("click", async () => {
    await addToCartHandler(0);
  });
  // enter
  qty.addEventListener("keydown", async (event) => {
    if(event.keyCode === 13) {
      await addToCartHandler(+ event.target.value);
      // for hide modal
      event.preventDefault();
    }
  });
</script>
