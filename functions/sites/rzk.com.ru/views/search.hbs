<h1>InstantSearch.js with Autocomlete</h1>
<div id="autocomplete"></div>
<div id="searchbox" class="row"></div>
<div id="hits" class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 row-cols-xxl-6 g-2 mb-3"></div>
<div class="row">
  <nav id="pagination" aria-label="Page navigation example"></nav>
</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-theme-classic"/>
<script src="https://cdn.jsdelivr.net/npm/algoliasearch@4.5.1/dist/algoliasearch-lite.umd.js" integrity="sha256-EXPXz4W6pQgfYY3yTpnDa3OH8/EPn16ciVsPQ/ypsjk=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/instantsearch.js@4.8.3/dist/instantsearch.production.min.js" integrity="sha256-LAGhRRdtVoD6RLo2qDQsU2mp+XVSciKRC8XPOBWmofM=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/@algolia/autocomplete-js"></script>
<script>
  const searchClient = algoliasearch('YZIFWJVE7R', 'a56bd432142fc9813846fa737167eeef');
  // router
  const instantSearchRouter = instantsearch.routers.history();
  const INSTANT_SEARCH_INDEX_NAME = 'products';
  const search = instantsearch({
    indexName: INSTANT_SEARCH_INDEX_NAME,
    searchClient,
    routing: {
      router: instantSearchRouter,
    },
  });

  // Create the render function
  const renderHits = (renderOptions, isFirstRender) => {
    const { hits, widgetParams } = renderOptions;

    widgetParams.container.innerHTML = `
      ${hits
          .map(
            item =>
              `<div class="col">
                <div class="card text-center h-100">
                  <div class="card-body">
                    <h6>${instantsearch.highlight({ attribute: 'name', hit: item })}</h6>
                  </div>
                </div>
              </div>
              `
          )
          .join('')}
    `;
  };

  // Create the custom widget
  const customHits = instantsearch.connectors.connectHits(renderHits);

  const renderPagination = (renderOptions, isFirstRender) => {
    const {
      pages,
      currentRefinement,
      nbPages,
      isFirstPage,
      isLastPage,
      refine,
      createURL,
    } = renderOptions;

    const container = document.querySelector('#pagination');

    container.innerHTML = `
      <ul class="pagination">
        ${
          !isFirstPage
            ? `
              <li class="page-item">
                <a class="page-link"
                  href="${createURL(0)}"
                  data-value="${0}"
                >
                  First
                </a>
              </li>
              <li class="page-item">
                <a class="page-link"
                  href="${createURL(currentRefinement - 1)}"
                  data-value="${currentRefinement - 1}"
                >
                  Previous
                </a>
              </li>
              `
            : ''
        }
        ${pages
          .map(
            page => `
              <li class="page-item ${currentRefinement === page ? 'active' : ''}">
                <a class="page-link"
                  href="${createURL(page)}"
                  data-value="${page}"
                >
                  ${page + 1}
                </a>
              </li>
            `
          )
          .join('')}
          ${
            !isLastPage
              ? `
                <li class="page-item">
                  <a class="page-link"
                    href="${createURL(currentRefinement + 1)}"
                    data-value="${currentRefinement + 1}"
                  >
                    Next
                  </a>
                </li>
                <li class="page-item">
                  <a class="page-link"
                    href="${createURL(nbPages - 1)}"
                    data-value="${nbPages - 1}"
                  >
                    Last
                  </a>
                </li>
                `
              : ''
          }
      </ul>
    `;

    [...container.querySelectorAll('a')].forEach(element => {
      element.addEventListener('click', event => {
        event.preventDefault();
        refine(event.currentTarget.dataset.value);
      });
    });
  };

  // Create the custom widget
  const customPagination = instantsearch.connectors.connectPagination(
    renderPagination
  );

  const virtualSearchBox = instantsearch.connectors.connectSearchBox(() => {})

  // Instantiate the custom widget
  search.addWidgets([
    virtualSearchBox({}),
    customHits({
      container: document.querySelector('#hits'),
    }),
    customPagination({
      container: document.querySelector('#pagination'),
    }),
  ]);

  search.start();

  // Set the InstantSearch index UI state from external events.
  function setInstantSearchUiState(indexUiState) {
    search.setUiState(uiState => ({
      ...uiState,
      [INSTANT_SEARCH_INDEX_NAME]: {
        ...uiState[INSTANT_SEARCH_INDEX_NAME],
        // We reset the page when the search state changes.
        page: 1,
        ...indexUiState,
      },
    }))
  }

  // Return the InstantSearch index UI state.
  function getInstantSearchUiState() {
    const uiState = instantSearchRouter.read()

    return (uiState && uiState[INSTANT_SEARCH_INDEX_NAME]) || {}
  }

  const searchPageState = getInstantSearchUiState();
  // autocomplite
  const { autocomplete, getAlgoliaResults } = window['@algolia/autocomplete-js'];

  autocomplete({
    container: '#autocomplete',
    placeholder: 'Search for products',
    detachedMediaQuery: 'none',
    initialState: {
      query: searchPageState.query || '',
    },
    onSubmit({ state }) {
      setInstantSearchUiState({ query: state.query })
    },
    onReset() {
      setInstantSearchUiState({ query: '' })
    },
    onStateChange({ prevState, state }) {
      if (prevState.query !== state.query) {
        setInstantSearchUiState({ query: state.query })
      }
    },
    getSources({ query }) {
      return [
        {
          sourceId: 'links',
          getItems({ query }) {
            return [
              { label: 'Twitter', url: 'https://twitter.com' },
              { label: 'GitHub', url: 'https://github.com' },
            ].filter(({ label }) =>
              label.toLowerCase().includes(query.toLowerCase())
            );
          },
          getItemUrl({ item }) {
            return item.url;
          },
          templates: {
            item({ item }) {
              return `Result: ${item.label}`;
            },
          },
        },
        {
          sourceId: 'products',
          getItems() {
            return getAlgoliaResults({
              searchClient,
              queries: [
                {
                  indexName: 'products',
                  query,
                  params: {
                    hitsPerPage: 5,
                    attributesToSnippet: ['name:10'],
                    snippetEllipsisText: 'â€¦',
                  },
                },
              ],
            });
          },
          getItemInputValue({ item }) {
            return item.name;
          },
          templates: {
            item({ item, components, html }) {
              return html`<div class="aa-ItemWrapper">
                <div class="aa-ItemContent">
                  <div class="aa-ItemIcon aa-ItemIcon--alignTop">
                    <img
                      src="${item.image}"
                      alt="${item.name}"
                      width="40"
                      height="40"
                    />
                  </div>
                  <div class="aa-ItemContentBody">
                    <div class="aa-ItemContentTitle">
                      ${components.Highlight({
                        hit: item,
                        attribute: 'name',
                      })}
                    </div>
                    <div class="aa-ItemContentDescription">
                      ${components.Snippet({
                        hit: item,
                        attribute: 'description',
                      })}
                    </div>
                  </div>
                  <div class="aa-ItemActions">
                    <button
                      class="aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly"
                      type="button"
                      title="Select"
                    >
                      <svg
                        viewBox="0 0 24 24"
                        width="20"
                        height="20"
                        fill="currentColor"
                      >
                        <path
                          d="M18.984 6.984h2.016v6h-15.188l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406-3.609 3.609h13.172v-4.031z"
                        />
                      </svg>
                    </button>
                    <button
                      class="aa-ItemActionButton"
                      type="button"
                      title="Add to cart"
                    >
                      <svg
                        viewBox="0 0 24 24"
                        width="18"
                        height="18"
                        fill="currentColor"
                      >
                        <path
                          d="M19 5h-14l1.5-2h11zM21.794 5.392l-2.994-3.992c-0.196-0.261-0.494-0.399-0.8-0.4h-12c-0.326 0-0.616 0.156-0.8 0.4l-2.994 3.992c-0.043 0.056-0.081 0.117-0.111 0.182-0.065 0.137-0.096 0.283-0.095 0.426v14c0 0.828 0.337 1.58 0.879 2.121s1.293 0.879 2.121 0.879h14c0.828 0 1.58-0.337 2.121-0.879s0.879-1.293 0.879-2.121v-14c0-0.219-0.071-0.422-0.189-0.585-0.004-0.005-0.007-0.010-0.011-0.015zM4 7h16v13c0 0.276-0.111 0.525-0.293 0.707s-0.431 0.293-0.707 0.293h-14c-0.276 0-0.525-0.111-0.707-0.293s-0.293-0.431-0.293-0.707zM15 10c0 0.829-0.335 1.577-0.879 2.121s-1.292 0.879-2.121 0.879-1.577-0.335-2.121-0.879-0.879-1.292-0.879-2.121c0-0.552-0.448-1-1-1s-1 0.448-1 1c0 1.38 0.561 2.632 1.464 3.536s2.156 1.464 3.536 1.464 2.632-0.561 3.536-1.464 1.464-2.156 1.464-3.536c0-0.552-0.448-1-1-1s-1 0.448-1 1z"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>`;
            },
          },
        },
      ];
    },
  });

</script>
